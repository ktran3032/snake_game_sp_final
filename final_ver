#include <curses.h>
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <signal.h>
#include <string.h>
#include <sys/time.h>

int ssize = 3;                  //the size of our snake currently
int u = 0;                      //up directional switch
int d = 0;                      //down directional switch
int l = 0;                      //left directional switch
int r = 0;                      //right directional switch
char *headchar;                 //current character the head is displaying, based on direction

int col[1000];                  //snake col array
int row[1000];                  //snake row array
int otempc;                     //temp row holder2, to save the holder1's col, so we can set the i+1's col to this
int otempr;                     //temp row holder2, to save the holder1's row, so we can set the i+1's row to this
int ntempc;                     //temp col holder1, to save the i+1's col, so we can set the i+2's col to this
int ntempr;                     //temp row holder1, to save the i+1's row, so we can set the i+2's row to this
int dir;                        //direction of snake

int margin = 3;                 //margin size for the border
int gameover = 0;               //game over switch for the opposite direction condition 

int trophy = 0;                 //trophy switch
int trow;                       //trophy's current row
int tcol;                       //trophy's current col
int tdur;                       //trophy's remaining duration
int tval;                       //trophy's value and display digit

void startscreen(){
    //center of the screen
    int colcen = COLS/2;
    int rowcen = LINES/2;
    clear();
    refresh();
    printf("The screen is %d rows, %d columns\n", LINES, COLS);
    move(rowcen, colcen-12);
    addstr("Press any key to continue\n");
    move(rowcen+2, colcen-29);
    addstr("The game will start as soon as the border finishes drawing\n");
    refresh();
    getchar();
    clear();

}

void drawborder(){
    //center of the screen
    int colcen = COLS/2;
    int rowcen = LINES/2;
    //next four lines is to keep the borders dynamic
    int nborder = margin;
    int sborder = LINES - margin;
    int wborder = margin;
    int eborder = COLS - margin;
    int drawspeed = 3000;  //so we don't have to change ever single draw block speed
    //drawing the top border
    for(int n = 0; n < eborder-wborder; n++){
        move(nborder, wborder+n);
        addstr("x");
        refresh();
        usleep(drawspeed);
    }
    //drawing the right border
    for(int n = 0; n < sborder-nborder; n++){
        move(nborder+n, eborder);
        addstr("x");
        refresh();
        usleep(drawspeed);
    }
    //drawing the bottom border
    for(int n = 0; n < eborder-wborder; n++){
        move(sborder, eborder-n);
        addstr("x");
        refresh();
        usleep(drawspeed);
    }
    //drawing the left border
    for(int n = 0; n < sborder-nborder; n++){
        move(sborder-n, wborder);
        addstr("x");
        refresh();
        usleep(drawspeed);
    }
    //just fun text above and below the border
    move(sborder+2, colcen-13);
    addstr("Use the arrow keys to move");
    move(nborder-2, colcen-27);
    addstr("To win, grow your snake half the size of the perimeter!");
    refresh();
    getchar();
}

int set_ticker(int n_msecs){
    //ticker
    struct itimerval new_timeset;
    long    n_sec, n_usecs;

    n_sec = n_msecs / 1000 ;
    n_usecs = ( n_msecs % 1000 ) * 1000L ;

    new_timeset.it_interval.tv_sec  = n_sec;        /* set reload  */
    new_timeset.it_interval.tv_usec = n_usecs;      /* new ticker value */
    new_timeset.it_value.tv_sec     = n_sec  ;      /* store this   */
    new_timeset.it_value.tv_usec    = n_usecs ;     /* and this     */

	return setitimer(ITIMER_REAL, &new_timeset, NULL);
}

void starting_direction(){
    //for loop that decides the starting direction of our snake
    int num = (rand() % (4));
    if(num == 0){
        u = 1;
        headchar = "^";
    }
    else if(num == 1){
        d = 1;
        headchar = "V";
    }
    else if(num == 2){
        l = 1;
        headchar = "<";
    }
    else if(num == 3){
        r = 1;
        headchar = ">";
    }
}

int main(int ac, char*av[]){
    initscr(); //initialize the curses library
    void move_snake(int);
    int speed = 1;          //we only need this variable to start the ticker, since the speed scales off the size of the snake
    //im not actually too sure if we need these declared in the main block just quite yet, but i added them just in case
    int colcen = COLS/2;
    int rowcen = LINES/2;
    //next four lines is to keep the borders dynamic
    int nborder = margin;
    int sborder = LINES - margin;
    int wborder = margin;
    int eborder = COLS - margin;
    int perimeter = (((sborder-nborder)*2) +((eborder-wborder)*2));
    //snake positions
    col[0] = colcen; //current x
    row[0] = rowcen; //current y
    //switches to tell us which arrow key was pressed last, and how we'll increment/decrement
    
    if(ac == 2){
        speed = atoi(av[1]);
    }
    startscreen();              //The start screen before the border is drawn
    drawborder();               //the border animation at the start
    starting_direction();       //chooses the initial starting direction
    //below this comment is the code for using the arrow keys and reading the key presses that he gave us
    curs_set(0);                // hide the cursor
    noecho();                   // do not echo user input to the screen
    keypad(stdscr, TRUE);       // enables working with the arrow keys
    move(0,0);         
    addstr("Press any key....");
    signal(SIGALRM, move_snake);
    set_ticker(speed);

    while(1) {
        int ch = getch();
        switch (ch) {
            case KEY_UP:        // user pressed up arrow key 
                move(0,0);
                addstr("You pressed the UP arrow           ");
                if(d == 1){
                    gameover = 1;
                    move((LINES/2), (COLS/2)-4);
                    addstr("GAMEOVER");
                    refresh();
                    int ch = getch();
                    endwin();
                    raise(SIGINT);
                }
                u = 1;
                d = 0;
                l = 0;
                r = 0;
                headchar = "^";
                break;
            case KEY_DOWN:      // user pressed down arrow key 
                move(0,0);
                addstr("You pressed the DOWN arrow         ");
                if(u == 1){
                    gameover = 1;
                    move((LINES/2), (COLS/2)-4);
                    addstr("GAMEOVER");
                    refresh();
                    int ch = getch();
                    endwin();
                    raise(SIGINT);
                }
                u = 0;
                d = 1;
                l = 0;
                r = 0;
                headchar = "V";
                break;
            case KEY_LEFT:      // user pressed left arrow key 
                move(0,0);
                addstr("You pressed the LEFT arrow         ");
                if(r == 1){
                    gameover = 1;
                    move((LINES/2), (COLS/2)-10);
                    addstr("  G A M E O V E R  ");
                    refresh();
                    int ch = getch();
                    endwin();
                    raise(SIGINT);
                }
                u = 0;
                d = 0;
                l = 1;
                r = 0;
                headchar = "<";
                break;
            case KEY_RIGHT:     // user pressed right arrow key 
                move(0,0);
                addstr("You pressed the RIGHT arrow        ");
                if(l == 1){
                    gameover = 1;
                    move((LINES/2), (COLS/2)-10);
                    addstr("  G A M E O V E R  ");
                    refresh();
                    int ch = getch();
                    endwin();
                    raise(SIGINT);
                }
                u = 0;
                d = 0;
                l = 0;
                r = 1;
                headchar = ">";
                break;
            case 'x':           // pressing x or X will exit the program
            case 'X': 
                endwin();       // close curses
                return 0;
            default:
                move(0,0);
                char buf[100];
                sprintf(buf,"You pressed a \"%c\" key, ASCI code %d       ", (char)ch, ch);
                addstr(buf);
                break;
            
        }           
    }
    endwin(); //turn off curses
}
void move_snake(int signum){
    signal(SIGALRM, move_snake);
    //as the snake grow, the number passed to the ticker gets lower, as the number gets lower, the speed grows faster
    set_ticker(100-(ssize));
    ntempc = col[0];
    ntempr = row[0];
    for(int i=0; i < ssize; i++){
        //for loop to set the next position to the one before it
        otempr = ntempr;
        otempc = ntempc;
        ntempr = row[i+1];
        ntempc = col[i+1];
        row[i+1] = otempr;
        col[i+1] = otempc;
    }
    //these next four if statements iterate the snake head position based on what directional switch is flipped
    if(u == 1){
        row[0]--;
    }
    if(d == 1){
        row[0]++;
    }
    if(l == 1){
        col[0]--;
    }
    if(r == 1){
        col[0]++;
    }
    if(trophy == 0){
        //this if statement checks if there is a trophy currently out, and if not it spawns one
        trow = (rand() % ((LINES -(margin+1)) - (margin+1))) + (margin+1); 
        tcol = (rand() % ((COLS- (margin+1)) - (margin+1))) + (margin+1); 
        tval = (rand() % (9-1) + 1); 
        move(trow, tcol);
        //this else if chain is to decide what digit to display, based on the size it gives the snake
        if(tval == 1){
            addstr("1");
        }
        else if(tval == 2){
            addstr("2");
        }
        else if(tval == 3){
            addstr("3");
        }
        else if(tval == 4){
            addstr("4");
        }
        else if(tval == 5){
            addstr("5");
        }
        else if(tval == 6){
            addstr("6");
        }
        else if(tval == 7){
            addstr("7");
        }
        else if(tval == 8){
            addstr("8");
        }
        else if(tval == 9){
            addstr("9");
        }
        //trophy dureation is independent from the number being displayed
        tdur = (20*(rand() % (9-1) + 1));
        trophy = 1;
    }
    if(col[0] == tcol && row[0] == trow){
        //this if statement checks if the snake head is in the same coords as the trophy, then adds the duration to the size of the snake
        trophy = 0;     //flips the trophy switch so a new trophy can be generated
        ssize += tval;  //dynamic snake size isnt implemented yet, it is currently stick at 2
    }
    if(col[0] < (margin+1) || col[0] > COLS-(margin+1) || row[0] < (margin+1) || row[0] > LINES-(margin+1) || gameover == 1){
        //this if statement is to check if the snake collided with the walls
        move((LINES/2), (COLS/2)-10);
        addstr("  G A M E O V E R  ");
        refresh();
        int ch = getch();
        endwin();
        raise(SIGINT);
    }
    if(ssize > (2*((COLS-margin)-(margin)))+(2*((LINES-margin)-(margin)))){
        //this if statement is to check if the snake is greater than the condition to win
        move((LINES/2), (COLS/2)-8);
        addstr("  Y O U   W I N  ");
        refresh();
        int ch = getch();
        endwin();
        raise(SIGINT);
    }
    for(int b = 1; b < ssize; b++){
        //this for loop detects if the snake ran into itself
        if(row[0] == row[b] && col[0] == col[b]){
            move((LINES/2), (COLS/2)-10);
            addstr("  G A M E O V E R  ");
            refresh();
            int ch = getch();
            endwin();
            raise(SIGINT);
        }
    }
    if(tdur == 0){
        //this if statement checkes to see if the trophy is out of time, and if it is, remove it, and flip the trophy switch
        move(trow, tcol);
        addstr(" ");
        refresh();
        trophy = 0;
    }
    tdur--;
    //these next few lines draw the actual snake
    move(row[0], col[0]);
    addstr(headchar);
    refresh();
    move(row[ssize-1], col[ssize-1]);
    addstr(" ");
}
